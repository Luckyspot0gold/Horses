<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Construction Safety Training Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .construction-pattern {
            background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        }
        .hazard-pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
            100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0); }
        }
        .equipment-glow {
            animation: glow 3s infinite alternate;
        }
        @keyframes glow {
            from { box-shadow: 0 0 5px -5px #3b82f6; }
            to { box-shadow: 0 0 5px 5px #3b82f6; }
        }
        .notification-slide {
            animation: slideIn 0.5s forwards, slideOut 0.5s forwards 4.5s;
        }
        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
        @keyframes slideOut {
            from { transform: translateX(0); }
            to { transform: translateX(100%); }
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
</head>
<body class="bg-gray-100 construction-pattern min-h-screen">
    <!-- Game Container -->
    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Game Header -->
        <header class="bg-yellow-500 text-white rounded-t-xl shadow-lg mb-6">
            <div class="flex items-center justify-between p-4">
                <div class="flex items-center space-x-2">
                    <i class="fas fa-hard-hat text-3xl"></i>
                    <h1 class="text-2xl font-bold">Construction Safety Training</h1>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="bg-yellow-600 px-3 py-1 rounded-full flex items-center">
                        <i class="fas fa-user-helmet-safety mr-2"></i>
                        <span id="playerLevel">Apprentice</span>
                    </div>
                    <div class="bg-yellow-600 px-3 py-1 rounded-full flex items-center">
                        <i class="fas fa-star mr-2"></i>
                        <span id="playerScore">0</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Game Area -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Left Panel - Game Scene -->
            <div class="lg:col-span-2 bg-white rounded-xl shadow-lg overflow-hidden">
                <div class="bg-gray-800 p-3 flex justify-between items-center">
                    <h2 class="text-white font-semibold">Construction Site</h2>
                    <div class="flex space-x-2">
                        <div id="gameTimer" class="bg-gray-700 text-white px-2 py-1 rounded text-sm">
                            <i class="fas fa-clock mr-1"></i> <span>05:00</span>
                        </div>
                        <button id="pauseBtn" class="bg-gray-700 text-white px-2 py-1 rounded text-sm">
                            <i class="fas fa-pause"></i>
                        </button>
                    </div>
                </div>
                
                <!-- 3D Scene Placeholder -->
                <div id="gameScene" class="relative h-96 bg-gradient-to-br from-gray-700 to-gray-900 rounded-b-lg overflow-hidden">
                    <!-- Site Elements will be added here dynamically -->
                    <div id="scaffolding" class="absolute bottom-0 left-1/4 w-24 h-32 bg-yellow-300 border-2 border-yellow-600 rounded">
                        <div class="absolute top-0 left-0 right-0 h-4 bg-yellow-600"></div>
                        <div class="absolute top-8 left-0 right-0 h-4 bg-yellow-600"></div>
                        <div class="absolute top-16 left-0 right-0 h-4 bg-yellow-600"></div>
                    </div>
                    
                    <div id="electricalBox" class="absolute bottom-0 left-1/2 w-16 h-12 bg-gray-400 border-2 border-gray-600 rounded-sm">
                        <div class="absolute top-1 left-1 right-1 bottom-1 bg-gray-200 rounded-sm flex items-center justify-center">
                            <i class="fas fa-bolt text-yellow-500"></i>
                        </div>
                    </div>
                    
                    <div id="excavator" class="absolute bottom-0 right-1/4 w-32 h-20">
                        <div class="absolute bottom-0 left-0 w-24 h-6 bg-orange-500 rounded-t"></div>
                        <div class="absolute bottom-6 left-4 w-4 h-6 bg-orange-600"></div>
                        <div class="absolute bottom-6 left-16 w-8 h-12 bg-orange-500 rounded-t"></div>
                        <div class="absolute bottom-12 left-20 w-2 h-8 bg-orange-700"></div>
                        <div class="absolute bottom-12 left-22 w-6 h-2 bg-orange-700"></div>
                    </div>
                    
                    <!-- Hazards (initially hidden) -->
                    <div id="scaffoldingHazard" class="hazard-pulse absolute top-16 left-1/4 w-24 h-4 bg-red-500 opacity-70 hidden"></div>
                    <div id="electricalHazard" class="hazard-pulse absolute bottom-12 left-1/2 w-16 h-2 bg-red-500 opacity-70 hidden"></div>
                    
                    <!-- Player Character -->
                    <div id="playerCharacter" class="absolute bottom-0 left-1/3 w-8 h-16 transition-all duration-300">
                        <div class="absolute bottom-0 left-0 w-8 h-8 bg-blue-500 rounded-full"></div>
                        <div class="absolute bottom-8 left-0 w-8 h-8 bg-blue-600 rounded-t-full"></div>
                        <div class="absolute bottom-4 left-8 w-4 h-2 bg-blue-700"></div>
                        <div class="absolute bottom-4 left-12 w-2 h-8 bg-blue-700"></div>
                    </div>
                </div>
                
                <!-- Controls -->
                <div class="bg-gray-100 p-4 flex justify-center space-x-4">
                    <button id="moveLeft" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition">
                        <i class="fas fa-arrow-left"></i> Left
                    </button>
                    <button id="moveRight" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition">
                        Right <i class="fas fa-arrow-right"></i>
                    </button>
                    <button id="identifyBtn" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition">
                        <i class="fas fa-search"></i> Identify
                    </button>
                    <button id="mitigateBtn" class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition">
                        <i class="fas fa-shield-alt"></i> Mitigate
                    </button>
                </div>
            </div>
            
            <!-- Right Panel - Game Info -->
            <div class="space-y-6">
                <!-- Objectives Panel -->
                <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                    <div class="bg-blue-600 p-3">
                        <h2 class="text-white font-semibold flex items-center">
                            <i class="fas fa-list-check mr-2"></i> Objectives
                        </h2>
                    </div>
                    <div class="p-4">
                        <ul id="objectivesList" class="space-y-3">
                            <li class="flex items-start">
                                <span class="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center mr-2">
                                    <i class="fas fa-check text-green-500 hidden"></i>
                                </span>
                                <span>Identify 3 hazards on site</span>
                            </li>
                            <li class="flex items-start">
                                <span class="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center mr-2">
                                    <i class="fas fa-check text-green-500 hidden"></i>
                                </span>
                                <span>Mitigate electrical hazard</span>
                            </li>
                            <li class="flex items-start">
                                <span class="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center mr-2">
                                    <i class="fas fa-check text-green-500 hidden"></i>
                                </span>
                                <span>Complete safety inspection</span>
                            </li>
                        </ul>
                    </div>
                </div>
                
                <!-- Hazards Panel -->
                <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                    <div class="bg-red-600 p-3">
                        <h2 class="text-white font-semibold flex items-center">
                            <i class="fas fa-triangle-exclamation mr-2"></i> Hazards Identified
                        </h2>
                    </div>
                    <div class="p-4">
                        <div id="hazardsList" class="space-y-3">
                            <div class="text-gray-500 italic">No hazards identified yet</div>
                        </div>
                    </div>
                </div>
                
                <!-- Equipment Panel -->
                <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                    <div class="bg-green-600 p-3">
                        <h2 class="text-white font-semibold flex items-center">
                            <i class="fas fa-toolbox mr-2"></i> Equipment
                        </h2>
                    </div>
                    <div class="p-4">
                        <div class="grid grid-cols-2 gap-3">
                            <div class="equipment-glow p-3 bg-gray-100 rounded-lg border border-gray-300 cursor-pointer" data-equipment="hardhat">
                                <i class="fas fa-hard-hat text-2xl text-yellow-600 mb-1"></i>
                                <div class="text-sm font-medium">Hard Hat</div>
                            </div>
                            <div class="equipment-glow p-3 bg-gray-100 rounded-lg border border-gray-300 cursor-pointer" data-equipment="harness">
                                <i class="fas fa-vest text-2xl text-blue-600 mb-1"></i>
                                <div class="text-sm font-medium">Safety Harness</div>
                            </div>
                            <div class="equipment-glow p-3 bg-gray-100 rounded-lg border border-gray-300 cursor-pointer" data-equipment="gloves">
                                <i class="fas fa-hand-paper text-2xl text-orange-500 mb-1"></i>
                                <div class="text-sm font-medium">Gloves</div>
                            </div>
                            <div class="equipment-glow p-3 bg-gray-100 rounded-lg border border-gray-300 cursor-pointer" data-equipment="goggles">
                                <i class="fas fa-goggles text-2xl text-gray-700 mb-1"></i>
                                <div class="text-sm font-medium">Goggles</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Notification Container -->
    <div id="notificationContainer" class="fixed top-4 right-4 space-y-2 w-72 z-50"></div>
    
    <!-- Dialogue Modal -->
    <div id="dialogueModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-xl shadow-xl w-full max-w-md mx-4">
            <div class="bg-blue-600 text-white p-4 rounded-t-xl flex justify-between items-center">
                <h3 class="font-bold text-lg">Safety Advisor</h3>
                <div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center">
                    <i class="fas fa-user-hard-hat text-xl"></i>
                </div>
            </div>
            <div class="p-6">
                <p id="dialogueText" class="mb-6 text-gray-700">Welcome to the construction site. Let's review some safety protocols.</p>
                <div id="dialogueOptions" class="space-y-2">
                    <button class="w-full text-left bg-gray-100 hover:bg-gray-200 p-3 rounded-lg transition">
                        <i class="fas fa-chevron-right text-blue-500 mr-2"></i> I'm ready to begin
                    </button>
                    <button class="w-full text-left bg-gray-100 hover:bg-gray-200 p-3 rounded-lg transition">
                        <i class="fas fa-chevron-right text-blue-500 mr-2"></i> Tell me more about safety
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Game Over Modal -->
    <div id="gameOverModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-xl shadow-xl w-full max-w-md mx-4">
            <div class="bg-red-600 text-white p-4 rounded-t-xl">
                <h3 class="font-bold text-lg text-center">Game Over</h3>
            </div>
            <div class="p-6 text-center">
                <i class="fas fa-face-sad-tear text-6xl text-red-500 mb-4"></i>
                <p id="gameOverReason" class="text-lg font-medium mb-4">Time expired before completing all objectives</p>
                <div class="bg-gray-100 rounded-lg p-4 mb-6">
                    <div class="flex justify-between mb-2">
                        <span>Score:</span>
                        <span id="finalScore" class="font-bold">1250</span>
                    </div>
                    <div class="flex justify-between mb-2">
                        <span>Hazards Identified:</span>
                        <span id="finalHazards" class="font-bold">2/3</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Objectives Completed:</span>
                        <span id="finalObjectives" class="font-bold">1/3</span>
                    </div>
                </div>
                <button id="restartBtn" class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition">
                    <i class="fas fa-rotate-right mr-2"></i> Try Again
                </button>
            </div>
        </div>
    </div>
    
    <!-- Victory Modal -->
    <div id="victoryModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-xl shadow-xl w-full max-w-md mx-4">
            <div class="bg-green-600 text-white p-4 rounded-t-xl">
                <h3 class="font-bold text-lg text-center">Mission Complete!</h3>
            </div>
            <div class="p-6 text-center">
                <i class="fas fa-trophy text-6xl text-yellow-500 mb-4"></i>
                <p class="text-lg font-medium mb-4">You've successfully completed all safety objectives!</p>
                <div class="bg-gray-100 rounded-lg p-4 mb-6">
                    <div class="flex justify-between mb-2">
                        <span>Final Score:</span>
                        <span id="victoryScore" class="font-bold">2750</span>
                    </div>
                    <div class="flex justify-between mb-2">
                        <span>Time Bonus:</span>
                        <span id="timeBonus" class="font-bold">+500</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Level Up:</span>
                        <span id="newLevel" class="font-bold">Safety Officer</span>
                    </div>
                </div>
                <button id="nextLevelBtn" class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition mr-2">
                    <i class="fas fa-arrow-up mr-2"></i> Next Level
                </button>
                <button id="menuBtn" class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition">
                    <i class="fas fa-home mr-2"></i> Main Menu
                </button>
            </div>
        </div>
    </div>

    <script>
        // Game State
        const gameState = {
            score: 0,
            level: 1,
            levelName: "Apprentice",
            timeLeft: 300, // 5 minutes in seconds
            gameActive: false,
            playerPosition: "middle",
            identifiedHazards: [],
            mitigatedHazards: [],
            completedObjectives: [],
            activeEquipment: null,
            notifications: []
        };

        // Hazards Data
        const hazards = {
            scaffolding: {
                id: "scaffolding",
                name: "Unsecured Scaffolding",
                description: "Scaffolding lacks proper guardrails and is unstable",
                position: "left",
                mitigation: "Install guardrails and stabilize structure"
            },
            electrical: {
                id: "electrical",
                name: "Exposed Wiring",
                description: "Electrical panel has exposed live wires",
                position: "middle",
                mitigation: "Turn off power and cover with insulated material"
            }
        };

        // Objectives Data
        const objectives = [
            { id: 1, description: "Identify 3 hazards on site", type: "identify", target: "any", required: 3 },
            { id: 2, description: "Mitigate electrical hazard", type: "mitigate", target: "electrical" },
            { id: 3, description: "Complete safety inspection", type: "complete" }
        ];

        // Initialize the game
        function initGame() {
            // Reset game state
            gameState.score = 0;
            gameState.timeLeft = 300;
            gameState.identifiedHazards = [];
            gameState.mitigatedHazards = [];
            gameState.completedObjectives = [];
            gameState.gameActive = true;
            
            // Update UI
            updateScore();
            updateTimer();
            updateObjectives();
            updateHazardsList();
            
            // Start game loop
            startGameLoop();
            
            // Show welcome notification
            addNotification("Welcome to the construction site! Identify and mitigate hazards.", "info");
            
            // Show initial dialogue
            showDialogue(
                "Safety Advisor", 
                "Welcome to your first day on the construction site. Your job is to identify potential safety hazards and take appropriate action to mitigate them. Let's begin with a quick safety briefing.", 
                [
                    { text: "I'm ready to begin", action: "startGame" },
                    { text: "Tell me more about safety", action: "showSafetyInfo" }
                ]
            );
        }

        // Game loop
        let gameInterval;
        function startGameLoop() {
            clearInterval(gameInterval);
            gameInterval = setInterval(() => {
                if (!gameState.gameActive) return;
                
                // Update timer
                gameState.timeLeft--;
                updateTimer();
                
                // Check for game over
                if (gameState.timeLeft <= 0) {
                    endGame(false, "Time expired before completing all objectives");
                }
                
                // Random events
                if (Math.random() < 0.01) { // 1% chance each second
                    triggerRandomEvent();
                }
            }, 1000);
        }

        // Update timer display
        function updateTimer() {
            const minutes = Math.floor(gameState.timeLeft / 60);
            const seconds = gameState.timeLeft % 60;
            document.getElementById('gameTimer').innerHTML = `<i class="fas fa-clock mr-1"></i> ${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        // Update score display
        function updateScore() {
            document.getElementById('playerScore').textContent = gameState.score;
            document.getElementById('playerLevel').textContent = gameState.levelName;
        }

        // Update objectives list
        function updateObjectives() {
            const objectivesList = document.getElementById('objectivesList');
            objectives.forEach(obj => {
                const item = objectivesList.querySelector(`li:nth-child(${obj.id})`);
                if (!item) return;
                
                const checkIcon = item.querySelector('.fa-check');
                const isCompleted = gameState.completedObjectives.includes(obj.id);
                
                if (isCompleted) {
                    checkIcon.classList.remove('hidden');
                    item.classList.add('text-gray-400');
                } else {
                    checkIcon.classList.add('hidden');
                    item.classList.remove('text-gray-400');
                }
                
                // Special handling for count-based objectives
                if (obj.type === "identify" && obj.target === "any") {
                    const count = gameState.identifiedHazards.length;
                    const span = item.querySelector('span:last-child');
                    span.textContent = `Identify ${count}/${obj.required} hazards on site`;
                }
            });
        }

        // Update hazards list
        function updateHazardsList() {
            const hazardsList = document.getElementById('hazardsList');
            
            if (gameState.identifiedHazards.length === 0) {
                hazardsList.innerHTML = '<div class="text-gray-500 italic">No hazards identified yet</div>';
                return;
            }
            
            hazardsList.innerHTML = '';
            gameState.identifiedHazards.forEach(hazardId => {
                const hazard = hazards[hazardId];
                const isMitigated = gameState.mitigatedHazards.includes(hazardId);
                
                const hazardItem = document.createElement('div');
                hazardItem.className = 'border-l-4 pl-3 py-1';
                hazardItem.style.borderColor = isMitigated ? '#10B981' : '#EF4444';
                
                hazardItem.innerHTML = `
                    <div class="font-medium ${isMitigated ? 'text-green-600' : 'text-red-600'}">
                        ${hazard.name} ${isMitigated ? '<i class="fas fa-check-circle ml-1 text-green-500"></i>' : ''}
                    </div>
                    <div class="text-sm text-gray-600">${hazard.description}</div>
                    ${isMitigated ? 
                        `<div class="text-xs text-green-700 mt-1"><i class="fas fa-shield-alt mr-1"></i> ${hazard.mitigation}</div>` : 
                        `<div class="text-xs text-red-700 mt-1"><i class="fas fa-exclamation-triangle mr-1"></i> Not mitigated</div>`
                    }
                `;
                
                hazardsList.appendChild(hazardItem);
            });
        }

        // Add notification
        function addNotification(message, type = "info") {
            const notificationContainer = document.getElementById('notificationContainer');
            
            const notification = document.createElement('div');
            notification.className = `notification-slide bg-white rounded-lg shadow-md overflow-hidden border-l-4 ${
                type === "error" ? "border-red-500" : 
                type === "success" ? "border-green-500" : 
                type === "warning" ? "border-yellow-500" : 
                "border-blue-500"
            }`;
            
            notification.innerHTML = `
                <div class="p-3 flex items-start">
                    <div class="mr-3 text-lg ${
                        type === "error" ? "text-red-500" : 
                        type === "success" ? "text-green-500" : 
                        type === "warning" ? "text-yellow-500" : 
                        "text-blue-500"
                    }">
                        ${type === "error" ? '<i class="fas fa-times-circle"></i>' : 
                          type === "success" ? '<i class="fas fa-check-circle"></i>' : 
                          type === "warning" ? '<i class="fas fa-exclamation-triangle"></i>' : 
                          '<i class="fas fa-info-circle"></i>'}
                    </div>
                    <div class="flex-1">
                        <div class="text-sm font-medium">${message}</div>
                    </div>
                    <button class="text-gray-400 hover:text-gray-500 ml-2" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            notificationContainer.appendChild(notification);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
            
            // Add to game state for tracking
            gameState.notifications.push({
                message,
                type,
                timestamp: new Date()
            });
        }

        // Show dialogue
        function showDialogue(speaker, message, options) {
            document.getElementById('dialogueText').textContent = message;
            
            const optionsContainer = document.getElementById('dialogueOptions');
            optionsContainer.innerHTML = '';
            
            options.forEach(opt => {
                const button = document.createElement('button');
                button.className = 'w-full text-left bg-gray-100 hover:bg-gray-200 p-3 rounded-lg transition';
                button.innerHTML = `<i class="fas fa-chevron-right text-blue-500 mr-2"></i> ${opt.text}`;
                button.onclick = () => {
                    handleDialogueOption(opt.action);
                    document.getElementById('dialogueModal').classList.add('hidden');
                };
                optionsContainer.appendChild(button);
            });
            
            document.getElementById('dialogueModal').classList.remove('hidden');
        }

        // Handle dialogue options
        function handleDialogueOption(action) {
            switch(action) {
                case 'startGame':
                    addNotification("Game started! Look for hazards around the site.", "info");
                    // Reveal hazards after a delay
                    setTimeout(() => {
                        document.getElementById('scaffoldingHazard').classList.remove('hidden');
                        document.getElementById('electricalHazard').classList.remove('hidden');
                    }, 2000);
                    break;
                    
                case 'showSafetyInfo':
                    showDialogue(
                        "Safety Advisor", 
                        "Construction sites have many potential hazards including falls, electrical dangers, equipment accidents, and more. Always wear proper PPE, stay alert, and follow OSHA guidelines. Report any unsafe conditions immediately.", 
                        [
                            { text: "I understand, let's begin", action: "startGame" },
                            { text: "What PPE should I wear?", action: "showPPEInfo" }
                        ]
                    );
                    break;
                    
                case 'showPPEInfo':
                    showDialogue(
                        "Safety Advisor", 
                        "Personal Protective Equipment (PPE) is essential. Always wear:\n- Hard hat\n- Safety glasses\n- High-visibility vest\n- Steel-toe boots\n- Gloves when handling materials\nAdditional PPE may be required for specific tasks.", 
                        [
                            { text: "Got it, I'm ready", action: "startGame" }
                        ]
                    );
                    break;
                    
                case 'continueGame':
                    // Just close the dialogue
                    break;
            }
        }

        // Move player
        function movePlayer(direction) {
            if (!gameState.gameActive) return;
            
            const player = document.getElementById('playerCharacter');
            let newPosition;
            
            if (direction === 'left') {
                if (gameState.playerPosition === 'right') {
                    gameState.playerPosition = 'middle';
                    player.style.left = '33%';
                } else if (gameState.playerPosition === 'middle') {
                    gameState.playerPosition = 'left';
                    player.style.left = '25%';
                }
            } else if (direction === 'right') {
                if (gameState.playerPosition === 'left') {
                    gameState.playerPosition = 'middle';
                    player.style.left = '33%';
                } else if (gameState.playerPosition === 'middle') {
                    gameState.playerPosition = 'right';
                    player.style.left = '50%';
                }
            }
            
            // Check for nearby hazards
            checkNearbyHazards();
        }

        // Check for nearby hazards
        function checkNearbyHazards() {
            // Highlight hazards near player
            Object.values(hazards).forEach(hazard => {
                const hazardElement = document.getElementById(`${hazard.id}Hazard`);
                if (hazard.position === gameState.playerPosition) {
                    hazardElement.classList.add('animate-pulse');
                } else {
                    hazardElement.classList.remove('animate-pulse');
                }
            });
        }

        // Identify hazard
        function identifyHazard() {
            if (!gameState.gameActive) return;
            
            // Check if player is near a hazard
            Object.values(hazards).forEach(hazard => {
                if (hazard.position === gameState.playerPosition && !gameState.identifiedHazards.includes(hazard.id)) {
                    // Add to identified hazards
                    gameState.identifiedHazards.push(hazard.id);
                    
                    // Update score
                    gameState.score += 100;
                    updateScore();
                    
                    // Update UI
                    updateHazardsList();
                    updateObjectives();
                    
                    // Show notification
                    addNotification(`Identified hazard: ${hazard.name}`, "success");
                    
                    // Show feedback dialogue
                    showDialogue(
                        "Safety Advisor", 
                        `Good job identifying the ${hazard.name.toLowerCase()}. ${hazard.description}. Next, you should mitigate this hazard by ${hazard.mitigation.toLowerCase()}.`, 
                        [
                            { text: "Understood", action: "continueGame" }
                        ]
                    );
                    
                    // Check if all hazards identified
                    if (gameState.identifiedHazards.length >= objectives[0].required) {
                        completeObjective(1);
                    }
                }
            });
        }

        // Mitigate hazard
        function mitigateHazard() {
            if (!gameState.gameActive) return;
            
            // Check if player is near a hazard that's identified but not mitigated
            Object.values(hazards).forEach(hazard => {
                if (hazard.position === gameState.playerPosition && 
                    gameState.identifiedHazards.includes(hazard.id) && 
                    !gameState.mitigatedHazards.includes(hazard.id)) {
                    
                    // Check if player has appropriate equipment
                    if (hazard.id === "electrical" && (!gameState.activeEquipment || gameState.activeEquipment !== "gloves")) {
                        addNotification("You need insulated gloves to mitigate this electrical hazard", "warning");
                        return;
                    }
                    
                    // Add to mitigated hazards
                    gameState.mitigatedHazards.push(hazard.id);
                    
                    // Update score
                    gameState.score += 250;
                    updateScore();
                    
                    // Update UI
                    updateHazardsList();
                    
                    // Check objectives
                    if (hazard.id === "electrical") {
                        completeObjective(2);
                    }
                    
                    // Show notification
                    addNotification(`Mitigated hazard: ${hazard.name}`, "success");
                    
                    // Visual feedback
                    const hazardElement = document.getElementById(`${hazard.id}Hazard`);
                    hazardElement.classList.remove('bg-red-500');
                    hazardElement.classList.add('bg-green-500');
                    
                    // Show feedback dialogue
                    showDialogue(
                        "Safety Advisor", 
                        `Excellent work mitigating the ${hazard.name.toLowerCase()}. You ${hazard.mitigation.toLowerCase()}, which makes the site safer for everyone.`, 
                        [
                            { text: "Thanks, I'll keep looking", action: "continueGame" }
                        ]
                    );
                }
            });
        }

        // Complete objective
        function completeObjective(objectiveId) {
            if (gameState.completedObjectives.includes(objectiveId)) return;
            
            gameState.completedObjectives.push(objectiveId);
            
            // Update score
            gameState.score += 500;
            updateScore();
            
            // Update UI
            updateObjectives();
            
            // Show notification
            const objective = objectives.find(o => o.id === objectiveId);
            addNotification(`Objective completed: ${objective.description}`, "success");
            
            // Check if all objectives completed
            if (gameState.completedObjectives.length === objectives.length) {
                endGame(true, "All objectives completed!");
            }
        }

        // Trigger random event
        function triggerRandomEvent() {
            const events = [
                {
                    message: "Weather alert: Rain starting soon. Watch for slippery surfaces!",
                    type: "warning",
                    action: () => {
                        document.getElementById('gameScene').classList.add('bg-blue-900');
                        setTimeout(() => {
                            document.getElementById('gameScene').classList.remove('bg-blue-900');
                        }, 5000);
                    }
                },
                {
                    message: "New hazard detected: Materials falling from upper level. Stay clear!",
                    type: "error",
                    action: () => {
                        // Add temporary falling hazard animation
                        const fallingHazard = document.createElement('div');
                        fallingHazard.className = 'absolute top-0 left-1/2 w-4 h-4 bg-red-500 rounded-full animate-bounce';
                        document.getElementById('gameScene').appendChild(fallingHazard);
                        
                        setTimeout(() => {
                            fallingHazard.remove();
                        }, 3000);
                    }
                },
                {
                    message: "Safety reminder: Don't forget to wear your hard hat at all times!",
                    type: "info"
                }
            ];
            
            const randomEvent = events[Math.floor(Math.random() * events.length)];
            addNotification(randomEvent.message, randomEvent.type);
            
            if (randomEvent.action) {
                randomEvent.action();
            }
        }

        // End game
        function endGame(success, reason) {
            gameState.gameActive = false;
            clearInterval(gameInterval);
            
            if (success) {
                // Calculate time bonus
                const timeBonus = Math.floor(gameState.timeLeft * 0.5);
                gameState.score += timeBonus;
                
                // Update level
                if (gameState.level < 5) {
                    gameState.level++;
                    gameState.levelName = ["Apprentice", "Safety Officer", "Site Supervisor", "Project Manager", "Safety Director"][gameState.level - 1];
                }
                
                // Show victory modal
                document.getElementById('victoryScore').textContent = gameState.score;
                document.getElementById('timeBonus').textContent = `+${timeBonus}`;
                document.getElementById('newLevel').textContent = gameState.levelName;
                document.getElementById('victoryModal').classList.remove('hidden');
            } else {
                // Show game over modal
                document.getElementById('gameOverReason').textContent = reason;
                document.getElementById('finalScore').textContent = gameState.score;
                document.getElementById('finalHazards').textContent = `${gameState.identifiedHazards.length}/${objectives[0].required}`;
                document.getElementById('finalObjectives').textContent = `${gameState.completedObjectives.length}/${objectives.length}`;
                document.getElementById('gameOverModal').classList.remove('hidden');
            }
        }

        // Select equipment
        function selectEquipment(equipmentId) {
            gameState.activeEquipment = equipmentId;
            addNotification(`Selected equipment: ${equipmentId}`, "info");
        }

        // Event listeners
        document.getElementById('moveLeft').addEventListener('click', () => movePlayer('left'));
        document.getElementById('moveRight').addEventListener('click', () => movePlayer('right'));
        document.getElementById('identifyBtn').addEventListener('click', identifyHazard);
        document.getElementById('mitigateBtn').addEventListener('click', mitigateHazard);
        document.getElementById('restartBtn').addEventListener('click', initGame);
        document.getElementById('nextLevelBtn').addEventListener('click', initGame);
        document.getElementById('menuBtn').addEventListener('click', () => {
            document.getElementById('victoryModal').classList.add('hidden');
        });
        document.getElementById('pauseBtn').addEventListener('click', () => {
            if (gameState.gameActive) {
                gameState.gameActive = false;
                document.getElementById('pauseBtn').innerHTML = '<i class="fas fa-play"></i>';
                addNotification("Game paused", "warning");
            } else {
                gameState.gameActive = true;
                document.getElementById('pauseBtn').innerHTML = '<i class="fas fa-pause"></i>';
                addNotification("Game resumed", "info");
                startGameLoop();
            }
        });
        
        // Equipment selection
        document.querySelectorAll('[data-equipment]').forEach(el => {
            el.addEventListener('click', () => {
                selectEquipment(el.getAttribute('data-equipment'));
            });
        });

        // Initialize game on load
        window.addEventListener('DOMContentLoaded', () => {
            // Position player initially
            document.getElementById('playerCharacter').style.left = '33%';
            
            // Show welcome screen
            setTimeout(() => {
                initGame();
            }, 1000);
        });
    </script>
</body>
</html>
